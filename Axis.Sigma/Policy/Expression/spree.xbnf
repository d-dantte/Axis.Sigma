#
# SPREE Grammar
#
#

# SPREE
$spree -> +[
	$boolean-exp
	@EOF
]



# Boolean Expression
$boolean-exp -> ?[
	$relational-exp
	$equality-exp
	$conditional-exp
	$boolean-unary-exp
	$boolean-value-exp
]




# Relational Expression
$relational-exp -> ?[
	$relational-set-exp
	$relational-scalar-exp
]
$relational-set-exp -> :3 +[
	+[$set-exp $block-space "in" $block-space $set-exp]
	+[$scalar-exp $block-space "in" $block-space $set-exp]
	+[$set-exp $block-space "contains" $block-space $scalar-exp]
]
$relational-scalar-exp -> ?[
	$numeric-relational-exp
	$string-relational-exp
	$timestamp-relational-exp
	$duration-relational-exp
]
$numeric-relational-exp -> :3 +[
	$numeric-exp
	$block-space $relational-scalar-operator
	$block-space $numeric-exp
]
$string-relational-exp -> :3 +[
	$string-exp
	$block-space $relational-scalar-operator
	$block-space $string-exp
]
$timestamp-relational-exp -> :3 +[
	$timestamp-exp
	$block-space $relational-scalar-operator
	$block-space $timestamp-exp
]
$duration-relational-exp -> :3 +[
	$duration-exp
	$block-space $relational-scalar-operator
	$block-space $duration-exp
]
$relational-scalar-operator -> ?[
	">" ">="
	"<" "<="
]




# Equality Expression
$equality-exp -> ?[
	$set-equality-exp
	$boolean-equaity-exp
	$numeric-equality-exp
	$string-equality-exp
	$timestamp-equality-exp
	$duration-equality-exp
]
$equality-operator -> ?[
	$equals
	$not-equals
]
$equals -> ?[
	"is equal to"
	"="
]
$not-equals -> ?[
	"is not equal to"
	"!="
]
$set-equality-exp -> :3 +[
	$set-exp
	$block-space $equality-operator
	$block-space $set-exp
]
$boolean-equality-exp -> :3 +[
	?[$relational-exp $conditional-exp $boolean-unary-exp $boolean-value-exp]
	$block-space $equality-operator
	$block-space $boolean-exp
]
$numeric-equality-exp -> :3 +[
	$numeric-exp
	$block-space $equality-operator
	$block-space $numeric-exp
]
$string-equality-exp -> :3 +[
	$string-exp
	$block-space $equality-operator
	$block-space $string-exp
]
$timestamp-equality-exp -> :3 +[
	$timestamp-exp
	$block-space $equality-operator
	$block-space $timestamp-exp
]
$duration-equality-exp -> :3 +[
	$duration-exp
	$block-space $equality-operator
	$block-space $duration-exp
]



# Conditional Expression
$conditional-exp -> :3 +[
	?[$relational-exp $equality-exp $boolean-unary-exp $boolean-value-exp]
	$block-space $conditional-operator
	$block-space $boolean-exp
]
$conditional-operator -> ?[
	"and"
	"or"
]




# Boolean Unary Expression
$boolean-unary-exp -> ?[
	$not-exp
	$present-exp
	$absent-exp
	$empty-exp
]
$not-exp -> +[
	"not"
	$block-space
	$boolean-exp
]
$present-exp -> +[
	$attribute-scalar-access-exp
	$block-space "present"
]
$absent-exp -> +[
	$attribute-scalar-access-exp
	$block-space "absent"
]
$empty-exp -> +[
	$set-value
	$block-space
	?[
		"is empty"
		"is not empty"
	]
]




# Boolean Value Expression
$boolean-value-exp -> ?[
	$boolean-constant-value
	$attirbute-scalar-access
	+[
		"(" $block-space.?
		?[$boolean-exp]
		$block-space.? ")"
	]
]
$boolean-constant-value -> ?[
	"true"
	"false"
]




# Value Expression
$value-exp -> ?[
	$set-exp
	$scalar-exp
	$boolean-exp
]
$set-exp -> ?[
	$attribute-set-access-exp
	$range-exp
	$set-exp
]
$range-exp -> 3: +[
	"["
	$scalar-exp
	".."
	$scalar-exp
	"]"
]
$set-exp -> :3 +[
	"["
	$block-space.? $scalar-value
	+[$block-space.? "," $block-space $scalar-value].+
	$block-space.? "]"
]
$scalar-exp -> ?[
	$string-exp
	$character-exp
	$timestamp-exp
	$duration-exp
	$character-exp
	$numeric-exp
]




# String Expression
$string-exp -> ?[
	$string-substring-exp
	$string-character-exp
	$string-conversion-exp
	$string-value-exp
]
$string-value-exp -> ?[
	$string-constant-exp
	$attribute-scalar-access-exp
]
$string-constant-exp ->@DelimitedString{
	start: '"',
	ranges: '^\n, ^\r'
}
$string-conversion-exp -> +[
	
]





# Character Expression
$character-exp -> [

]




# Timestamp Expression
$timestamp-exp -> [

]




# Duration Expression
$duration-exp -> [

]




# Character Expression
$character-exp -> [

]




# Numeric Expression (flattened)
$numeric-exp -> +[
	$numeric-value-exp
	+[
		$block-space $numeric-operator
		$block-space $numeric-value-exp
	].*
]
$numeric-operator -> ?[
	"^"
	"<<" ">>"
	"*" "/" "%"
	"+" "-"
]

# Numeric value
$numeric-value-exp -> ?[
	$numeric-constant-value
	$attirbute-scalar-access
	+[
		"(" $block-space.?
		$numeric-exp
		$block-space.? ")"
	]
]
$numeric-constant-value -> ?[
	$integer-constant-value
	$real-constant-value
	$decimal-constant-value
]
$integer-constant-value -> +[
	"-".?
	/^\d+$/
	?["i" "I"]
]
$real-constant-value -> +[
	# integral part
	"-".? /^\d+$/

	# decimal part
	"." /^\d+$/

	# optional exponent part
	+[
		?["e" "E"]
		?["+" "-"]
		/^\d+$/
	].?

	# suffix
	"r"
]
$decimal-constant-value -> +[
	# integral part
	"-".? /^\d+$/

	# decimal part
	"." /^\d+$/

	# optional exponent part
	+[
		?["e" "E"]
		?["+" "-"]
		/^\d+$/
	].?

	# suffix
	?["d" "D"]
]




# Global Reference Expression
$global-ref-exp -> ?[
	"@subject"
	"@resource"
	"@intent"
	"@environment"
]
$attribute-scalar-access-exp -> :2 +[
	$global-ref-exp
	?[
		+["." $attribute-identifier]
		+[".'" $attribute-name "'"]
	].+
]
$attribute-set-access-exp -> :2 +[
	$global-ref-exp
	"["
	?[
		$attribute-identifier
		+["'" $attribute-name "'"]
	]
	"]"
]




# Whitespaces
$block-space -> ?[$space $tab $line-feed $carriage-return].+
$line-space -> ?[$space $tab].+
$space -> '\s'
$tab -> '\t'
$line-feed -> "\n"
$carriage-return -> '\r'